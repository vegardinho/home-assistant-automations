blueprint:
  name: Morgendimming
  description: "Script for gradually dimming lights"
  domain: automation
  input:
    start_scene:
      name: Start scene
      description: Scene to gradually brighten. Typically minimum brightness and blue color.
      selector:
        entity:
          domain: scene
    light_entity:
      name: Light entity
      description: ""
      selector:
        entity:
          domain: light
    # start_trigger:
    #   name: Start trigger
    #   description: Entity that triggers start of automation.
    #   selector:
    #     entity: 
    #       domain: input_datetime
    alarm_entity:
      name: Alarm start
      description: Entity with time for end of automation.
      selector:
        entity:
          domain: input_datetime           
    device_tracker:
      name: Device tracker
      description: Device that must be 'home' for automation to run.
      default:
      selector:
        entity:
          domain: device_tracker
    device_wifi:
      name: Device WiFi (SSID)
      description: Enitity for wifi network connected to device.
      selector:
        entity:
            domain: sensor
    home_wifi:
      name: Home WiFi
      description: Name of home network
      default: Blue Train
      selector:
        text:
    transition_length:
      name: Dim length
      description: Number of minutes before alarm to start dimming.
      default: 60
      selector:
        number:
variables:
  # start_trigger: !input start_trigger
  transition_length: !input transition_length
  alarm_entity: !input alarm_entity
  light_entity: !input light_entity
  device_wifi: !input device_wifi
  home_wifi: !input home_wifi
  sub_trans_sec: 60
  tot_trans_sec: >-
    {% set start_time = now().strftime('%H:%M:%S') | as_timedelta %}
    {% set end_time = states(alarm_entity) | as_timedelta %}
    {{ (end_time - start_time).seconds }}
  tot_trans_min: "{{ tot_trans_sec // 60 | int }}"
  dim_step: "{{ (sub_trans_sec / tot_trans_sec) * 255 | float }}"
  repeats: "{{ (tot_trans_sec // sub_trans_sec) + 1}}"
  lim_start: >-
    {{ as_timedelta(states('input_datetime.telefonalarm')) -
    timedelta(minutes=(transition_length)) }}
  lim_end: >-
    {{ as_timedelta(states('input_datetime.telefonalarm')) -
    timedelta(minutes=(transition_length-1)) }}
  lim_start_seconds: "{{ as_timedelta(lim_start).seconds }}"
  lim_end_seconds: "{{ as_timedelta(lim_end).seconds }}"
  now_seconds: "{{ as_timedelta(now().strftime('%H:%M:%S')).secondsÂ }}"
mode: restart
triggers:
  # - at: input_datetime.dimmetidspunkt_morgen
  #   enabled: true
  #   trigger: time
  - trigger: time_pattern
    minutes: /1
conditions:
  - condition: template
    value_template: >-
      {{ as_timedelta(lim_start).seconds <=
      as_timedelta(now().strftime('%H:%M:%S')).seconds <
      as_timedelta(lim_end).seconds }}
  - condition: or
    conditions:
      - condition: zone
        entity_id: !input device_tracker
        zone: zone.home
      - condition: template
        value_template: >-
         {{ home_wifi == states(device_wifi) }}
actions:
  - metadata: {}
    target:
      entity_id: !input start_scene
    enabled: true
    action: scene.turn_on
  - repeat:
      sequence:
        - metadata: {}
          data:
            transition: "{{ sub_trans_sec - 1}}" # Leave safety margin
            # brightness_step_pct: "{{ dim_step }}"
            brightness: "{{ (repeat.index) * dim_step }}" # More fail safe than increases
          target:
            entity_id: !input light_entity
          action: light.turn_on
        - delay: "{{ sub_trans_sec }}" 
      until:
        - condition: template
          value_template: "{{ (repeat.index - 1) * dim_step > 100 }}"
          
        #   value_template: >- # Check if full brightness, or if someone has changed the brightness outside automation
        #     {% set finished = false %} 
        #     {% set entity_brightness = state_attr(light_entity, 'brightness') %}
        #     {% if (entity_brightness >= 255) or (repeat.index > 1 and (entity_brightness > 3) and (entity_brightness != (repeat.index - 1) * dim_step)) %}
        #     {% set finished = true %}{% endif %}
        #     {{ finished }}
    enabled: true
