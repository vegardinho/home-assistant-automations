blueprint:
  name: Morgendimming
  description: "Script for gradually dimming lights"
  domain: automation
  input:
    start_scene:
      name: Start scene
      description: Scene to gradually brighten. Typically minimum brightness and blue color.
      selector:
        entity:
          domain: scene
    light_entity:
      name: Light entity
      description: ""
      selector:
        entity:
          domain: light
    start_trigger:
      name: Start trigger
      description: Entity that triggers start of automation.
      selector:
        entity: 
          domain: input_datetime
    alarm_entity:
      name: Alarm start
      description: Entity with time for end of automation.
      selector:
        entity:
          domain: input_datetime           
    device_tracker:
      name: Device tracker
      description: Device that must be 'home' for automation to run.
      default:
      selector:
        entity:
          domain: device_tracker
    device_wifi:
      name: Device WiFi (SSID)
      description: Enitity for wifi network connected to device.
      selector:
        entity:
            domain: sensor
    home_wifi:
      name: Home WiFi
      description: Name of home network
      default: Blue Train
      selector:
        text:
    transition_length:
      name: Dim length (minutes)
      description: Number of minutes before alarm to start dimming.
      default: 60
      selector:
        number:
variables:
  transition_length: !input transition_length
  alarm_entity: !input alarm_entity
  light_entity: !input light_entity
  device_wifi: !input device_wifi
  home_wifi: !input home_wifi
  sub_trans_sec: 60
  tot_trans_sec: >-
    {% set start_time = now().strftime('%H:%M:%S') | as_timedelta %}
    {% set end_time = states(alarm_entity) | as_timedelta %}
    {{ (end_time - start_time).seconds }}
  tot_trans_min: "{{ tot_trans_sec // 60 | int }}"
  dim_step: "{{ (sub_trans_sec / tot_trans_sec) * 255 | float }}"
  repeats: "{{ (tot_trans_sec // sub_trans_sec) + 1}}"
  trigger_type: '{{ trigger.platform }}'
mode: parallel
triggers:
  - at: !input start_trigger
    trigger: time
  - entity_id:
    - !input alarm_entity
    trigger: state
actions:
- if: 
  - condition: template
    value_template: "{{ trigger_type == 'state'}}" # Hvis utlÃ¸st av endring av dimmetidspunkt
  then:
    sequence:
      - data:
          time: >
            {## Convert minutes to seconds. ##} {% set dimtime_stamp =
            transition_length * 60 %} {% set
            alarm_stamp = state_attr(alarm_entity, "timestamp") %}
            {## Convert to time format, and keep original time zone. ##} {{
            (alarm_stamp - dimtime_stamp) | timestamp_custom("%H:%M", false) }} 
        target:
          entity_id: !input start_trigger
        action: input_datetime.set_datetime
- if:
  - condition: and
    conditions:
      - condition: template
        value_template: "{{ trigger_type == 'time' }}"
      - condition: or
        conditions:
          - condition: zone
            entity_id: !input device_tracker
            zone: zone.home
          - condition: template
            value_template: "{{ home_wifi == states(device_wifi) }}"
  then:
    - metadata: {}
      target:
        entity_id: !input start_scene
      action: scene.turn_on
    - repeat:
        sequence:
            - metadata: {}
              data:
                transition: "{{ sub_trans_sec - 1}}" # Leave safety margin
                # brightness_step_pct: "{{ dim_step }}"
                brightness: "{{ (repeat.index) * dim_step }}" # More fail safe than increases
              target:
                entity_id: !input light_entity
              action: light.turn_on
            - delay: "{{ sub_trans_sec }}" 
        until:
            - condition: template
              value_template: >- # Check if full brightness. If someone has changed the brightness outside automation, Home Assistant sets brightness to 'none', which then gives default value.
                {% set entity_brightness = state_attr(light_entity, 'brightness') | int(256) %}
                {% if (entity_brightness >= 255) %}
                {{ true }}{% endif %}
